app.post("/forgot-password", async (req, res) => {
  const { email } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).send("User not available");

    
    const resetToken = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {
      expiresIn: "1h",
    });

    // Create transporter for email
    const transporter = nodemailer.createTransport({
      service: "Gmail",
      auth: {
        user: process.env.EMAIL,
        pass: process.env.EMAIL_PASSWORD,
      },
    });

    // Create reset URL containing the reset token
    const resetURL = `http://localhost:3000/reset-password/${resetToken}`;

    // Send email with reset password link
    await transporter.sendMail({
      from: process.env.EMAIL,
      to: user.email,
      subject: "Password Reset",
      text: `You requested a password reset. Click here to reset your password: ${resetURL}`,
    });

    res.send("Reset password link sent to your email");
  } catch (error) {
    res.status(500).send("Error sending reset email");
  }
});

app.get("/reset-password/:token", (req, res) => {
  const { token } = req.params;

  // Render reset password page with the token 
  res.render("reset-password", { token });  
});

//reset-password --->>ejs

// <form action="/reset-password" method="POST">
//   <input type="hidden" name="token" value="<%= token %>">
//   <label for="newPassword">New Password:</label>
//   <input type="password" id="newPassword" name="newPassword" required>
//   <button type="submit">Reset Password</button>
// </form>

app.post("/reset-password", async (req, res) => {
  const { token, newPassword } = req.body;

  try {
    //verification of token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.userId);
    if (!user) return res.status(404).send("Invalid token");

    //hasing  and  saving the new password
    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(newPassword, salt);
    await user.save();

    res.send("Password has been reset successfully");
  } catch (err) {
    res.status(400).send("Invalid or expired token");
  }
});
